{{range $value := .}}

type {{$value.Message.GoIdent.GoName}}Flag struct{
    *{{$value.Message.GoIdent.GoName}}

    changed bool
    set *pflag.FlagSet

    {{range $value.Flags -}}
        {{if not .Message -}}
    {{.FlagField}}
        {{else -}}
            {{if not .IsList -}}
    {{.VarName}} *{{.Message.Type}}Flag
            {{else -}}
    {{.VarName}} []*{{.Message.Type}}Flag
            {{end -}}
        {{end -}}
    {{end -}}
}

func(x *{{$value.Message.GoIdent.GoName}}Flag) AddFlags(parent *pflag.FlagSet) {
    x.set = pflag.NewFlagSet("{{$value.Message.GoIdent.GoName}}", pflag.ContinueOnError)

    {{range $value.Flags -}}
        {{if not .Message -}}
    {{.FlagConstructor}}
        {{else -}}
            {{if .IsList -}}
    x.{{.VarName}} = []*{{.Message.Type}}Flag{}
            {{end -}}
        {{end -}}
    {{end -}}

    {{range $value.Flags -}}
        {{if .Message -}}
            {{if not .IsList -}}
    x.{{.VarName}} = &{{.Message.Type}}Flag{ {{.Message.Type}}: new({{.Message.Type}}) }
    x.{{.VarName}}.AddFlags(x.set)
            {{end -}}
        {{end -}}
    {{end -}}

    parent.AddFlagSet(x.set)
}

func(x *{{$value.Message.GoIdent.GoName}}Flag) ParseFlags(parent *pflag.FlagSet, args []string) {
    flagIndexes := fieldIndexes(args, {{$value.NestedFlagNames}})

    if err := x.set.Parse(flagIndexes.primitives().args); err != nil {
		DefaultConfig.Logger.Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

    {{range $value.Flags}}
        {{if .Message -}}
            {{if not .IsList -}}
    if flagIdx := flagIndexes.lastByName("{{.Name}}"); flagIdx != nil {
    	x.{{.VarName}}.ParseFlags(x.set, flagIdx.args)
    }
            {{end -}}
        {{end -}}
    {{end -}}

    {{range $value.Flags}}
        {{if .Message -}}
            {{if not .OneOf -}}
                {{if .IsList -}}
    for _, flagIdx := range flagIndexes.byName("{{.Name}}") {
        x.{{.VarName}} = append(x.{{.VarName}}, &{{.Message.Type}}Flag{ {{.Message.Type}}: new({{.Message.Type}}) })
    	x.{{.VarName}}[len(x.{{.VarName}})-1].AddFlags(x.set)
    	x.{{.VarName}}[len(x.{{.VarName}})-1].ParseFlags(x.set, flagIdx.args)
    }
                {{end -}}
            {{end -}}
        {{end -}}
    {{end -}}

    {{range $value.Flags -}}
        {{if not .OneOf -}}
            {{if not .Message -}}
    if x.{{.VarName}}.Changed() {
        x.changed = true
        x.{{.FieldName}} = {{if not .IsPtr}}*{{end}}x.{{.VarName}}.Value
    }
            {{else -}}
                {{if .IsList -}}
    if len(x.{{.VarName}}) > 0 {
        x.changed = true
        x.{{.FieldName}} = make([]*{{.Message.Type}}, len(x.{{.VarName}}))
        for i, value := range x.{{.VarName}} {
            x.{{.FieldName}}[i] = value.{{.Message.Type}}
        }
    }
                {{else}}
    if x.{{.VarName}}.Changed() {
        x.changed = true
        x.{{.FieldName}} = x.{{.VarName}}.{{.Message.Type}}
    }
                {{end}}
            {{end -}}
        {{end -}}
    {{end -}}

    {{range $oneOf := $value.OneOfs}}
    switch fieldIndexes(args, {{$oneOf.FieldNames}}).last().flag {
        {{range .Flags -}}
        case "{{.Name}}":
            {{if not .Message -}}
            if x.{{.VarName}}.Changed() {
                x.changed = true
                x.{{$oneOf.FieldName}} = &{{.Type}}{ {{.FieldName}}: *x.{{.VarName}}.Value }
            }
            {{else -}}
                {{if .IsList -}}
    if len(x.{{.VarName}}) > 0 {
        x.{{.FieldName}} = make([]*{{.Message.Type}}, len(x.{{.VarName}}))
        for i, value := range x.{{.VarName}} {
            x.changed = true
            x.{{$oneOf.FieldName}}[i] = value.{{.Message.Type}}
        }
    }
                {{else -}}
    if x.{{.VarName}}.Changed() {
        x.changed = true
        x.{{$oneOf.FieldName}} = &{{.Type}}{ {{.FieldName}}:  x.{{.VarName}}.{{.Message.Type}} }
    }
                {{end -}}
            {{end -}}
        {{end -}}
    }
    {{end -}}
}

func(x *{{$value.Message.GoIdent.GoName}}Flag) Changed() bool {
    return x.changed
}

{{end}}