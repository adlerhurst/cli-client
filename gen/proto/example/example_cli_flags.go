// Code generated by protoc-gen-go-cli. DO NOT EDIT.

package example

import (
	pflag "github.com/spf13/pflag"
	os "os"
)

func (x *CallRequest) ParseFlags(parent *pflag.FlagSet, args []string) {
	set := pflag.NewFlagSet("CallRequest", pflag.ContinueOnError)
	parent.AddFlagSet(set)

	useFieldNameFlag := NewStringFlag(set, "useFieldName", "")
	useCustomNameFlag := NewStringFlag(set, "useCustomName", "")
	createdAtFlag := NewTimestampFlag(set, "createdAt", "")
	payloadFlag := NewStructFlag(set, "payload", "")
	watFlag := NewEnumFlag[CallRequest_Wat](set, "wat", "")
	isSomethingFlag := NewBoolFlag(set, "isSomething", "")
	i32Flag := NewInt32Flag(set, "i32", "")
	ui32Flag := NewUint32Flag(set, "ui32", "")
	i64Flag := NewInt64Flag(set, "i64", "")
	ui64Flag := NewUint64Flag(set, "ui64", "")
	flFlag := NewFloatFlag(set, "fl", "")
	dblFlag := NewDoubleFlag(set, "dbl", "")
	beizFlag := NewBytesFlag(set, "beiz", "")
	si32Flag := NewSint32Flag(set, "si32", "")
	si64Flag := NewSint64Flag(set, "si64", "")
	f32Flag := NewFixed32Flag(set, "f32", "")
	f64Flag := NewFixed64Flag(set, "f64", "")
	sf32Flag := NewSfixed32Flag(set, "sf32", "")
	sf64Flag := NewSfixed64Flag(set, "sf64", "")
	someFlag := NewEnumFlag[Some](set, "some", "")
	repSFlag := NewDoubleSliceFlag(set, "repS", "")
	repWatFlag := NewEnumSliceFlag[CallRequest_Wat](set, "repWat", "")
	somethingFlag := NewAnyFlag(set, "something", "")

	flagIndexes := fieldIndexes(args, "nested", "repNest")

	if err := set.Parse(args); err != nil {
		DefaultConfig.Logger.Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	x.UseFieldName = *useFieldNameFlag.Value
	x.UseCustomName = *useCustomNameFlag.Value
	x.CreatedAt = createdAtFlag.Value
	x.Payload = payloadFlag.Value
	x.Wat = *watFlag.Value
	x.IsSomething = *isSomethingFlag.Value
	x.I32 = *i32Flag.Value
	x.Ui32 = *ui32Flag.Value
	x.I64 = *i64Flag.Value
	x.Ui64 = *ui64Flag.Value
	x.Fl = *flFlag.Value
	x.Dbl = *dblFlag.Value
	x.Beiz = *beizFlag.Value
	x.Si32 = *si32Flag.Value
	x.Si64 = *si64Flag.Value
	x.F32 = *f32Flag.Value
	x.F64 = *f64Flag.Value
	x.Sf32 = *sf32Flag.Value
	x.Sf64 = *sf64Flag.Value
	x.Some = *someFlag.Value
	x.RepS = *repSFlag.Value
	x.RepWat = *repWatFlag.Value
	x.Something = somethingFlag.Value

	if flagIdx := flagIndexes.lastByName("nested"); flagIdx != nil {
		x.Nested = new(CallRequest_Nested)
		x.Nested.ParseFlags(set, flagIdx.args)
	}

	for _, flagIdx := range flagIndexes.byName("repNest") {
		x.RepNest = append(x.RepNest, new(CallRequest_Nested))
		x.RepNest[len(x.RepNest)-1].ParseFlags(set, flagIdx.args)
	}

}

func (x *CallRequest_Nested) ParseFlags(parent *pflag.FlagSet, args []string) {
	set := pflag.NewFlagSet("CallRequest_Nested", pflag.ContinueOnError)
	parent.AddFlagSet(set)

	fieldFlag := NewStringFlag(set, "field", "")

	if err := set.Parse(args); err != nil {
		DefaultConfig.Logger.Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	x.Field = *fieldFlag.Value

}

func (x *NestedRequest) ParseFlags(parent *pflag.FlagSet, args []string) {
	set := pflag.NewFlagSet("NestedRequest", pflag.ContinueOnError)
	parent.AddFlagSet(set)

	idFlag := NewStringFlag(set, "id", "")

	flagIndexes := fieldIndexes(args, "nested")

	if err := set.Parse(args); err != nil {
		DefaultConfig.Logger.Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	x.Id = *idFlag.Value

	if flagIdx := flagIndexes.lastByName("nested"); flagIdx != nil {
		x.Nested = new(NestedRequest_Nested)
		x.Nested.ParseFlags(set, flagIdx.args)
	}

}

func (x *NestedRequest_Nested) ParseFlags(parent *pflag.FlagSet, args []string) {
	set := pflag.NewFlagSet("NestedRequest_Nested", pflag.ContinueOnError)
	parent.AddFlagSet(set)

	idFlag := NewStringFlag(set, "id", "")
	depthFlag := NewInt32Flag(set, "depth", "")

	if err := set.Parse(args); err != nil {
		DefaultConfig.Logger.Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	x.Id = *idFlag.Value
	x.Depth = *depthFlag.Value

}
