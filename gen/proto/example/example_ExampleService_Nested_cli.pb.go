// Code generated by protoc-gen-go-cli. DO NOT EDIT.
//18:57:22

package example

import (
	cobra "github.com/spf13/cobra"
	pflag "github.com/spf13/pflag"
)

var (
	ExampleMyCallCmd = &cobra.Command{
		Use: "mycall",
		Short: ` I do absolutely nothing
 rpc Call(CallRequest) returns (CallResponse) {
     option (cli.v1alpha.call_name) = "myCall";
 };
`,
		Long: ` I do absolutely nothing
 rpc Call(CallRequest) returns (CallResponse) {
     option (cli.v1alpha.call_name) = "myCall";
 };
`,
		PreRun:             Unmarshal, //ExampleMyCallRequest,
		Run:                runExampleMyCallCmd,
		FParseErrWhitelist: cobra.FParseErrWhitelist{UnknownFlags: true},
		DisableFlagParsing: true,
	}
)

func init() {
	set := pflag.NewFlagSet("request", pflag.ContinueOnError)

	new(PathField).AddFlag(set)
	(&StringField{Name: "id", Usage: ``}).AddFlag(set)
	ExampleMyCallCmd.Flags().AddFlagSet(set)

	nestedSet := pflag.NewFlagSet("nested", pflag.ContinueOnError)

	(&MessageField[*NestedRequest_Nested]{
		field: field[*NestedRequest_Nested]{
			Name: "nested", Usage: ``,
		},
		fields: []Field{
			&StringField{Name: "id", Usage: ``},
			&Int32Field{Name: "depth", Usage: ``}},
	}).AddFlag(nestedSet)
	ExampleMyCallCmd.Flags().AddFlagSet(nestedSet)
}

func runExampleMyCallCmd(cmd *cobra.Command, args []string) {
	cmd.Flags().VisitAll(func(f *pflag.Flag) {
		DefaultConfig.Logger.Info("flag", "name", f.Name, "value", f.Value.String(), "changed", f.Changed)
	})
}
