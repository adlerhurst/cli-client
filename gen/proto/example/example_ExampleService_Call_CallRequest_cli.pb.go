// Code generated by protoc-gen-go-cli. DO NOT EDIT.
//23:38:50

package example

import (
	cobra "github.com/spf13/cobra"
	pflag "github.com/spf13/pflag"
	os "os"
)

func (x *CallRequest) ParseFlags(cmd *cobra.Command, args []string) {
	set := pflag.NewFlagSet("request", pflag.ContinueOnError)
	cmd.Flags().AddFlagSet(set)

	_UseFieldName := NewStringFlag(set, "use_field_name", ``)
	_UseCustomName := NewStringFlag(set, "custom", ``)
	_CreatedAt := NewTimestampFlag(set, "created_at", ``)
	_Payload := NewStructFlag(set, "payload", ``)
	_Wat := NewEnumFlag[CallRequest_Wat](set, "wat", ``)
	_IsSomething := NewBoolFlag(set, "is_something", ``)
	_I32 := NewInt32Flag(set, "i32", ``)
	_Ui32 := NewUint32Flag(set, "ui32", ``)
	_I64 := NewInt64Flag(set, "i64", ``)
	_Ui64 := NewUint64Flag(set, "ui64", ``)
	_Fl := NewFloatFlag(set, "fl", ``)
	_Dbl := NewDoubleFlag(set, "dbl", ``)
	_Beiz := NewBytesFlag(set, "beiz", ``)
	_Si32 := NewInt32Flag(set, "si32", ``)
	_Si64 := NewInt64Flag(set, "si64", ``)
	_F32 := NewUint32Flag(set, "f32", ``)
	_F64 := NewUint64Flag(set, "f64", ``)
	_Sf32 := NewInt32Flag(set, "sf32", ``)
	_Sf64 := NewInt64Flag(set, "sf64", ``)
	_Some := NewEnumFlag[Some](set, "some", ``)
	_RepS := NewDoubleSliceFlag(set, "rep_s", ``)
	_RepWat := NewEnumSliceFlag[CallRequest_Wat](set, "rep_wat", ``)
	_Something := NewAnyFlag(set, "something", ``)

	flagIndexes := fieldIndexes(args, "nested", "rep_nest")

	// parse primitive flags before first nested
	if err := set.Parse(flagIndexes.primitives().args); err != nil {
		DefaultConfig.Logger.Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	x.UseFieldName = *_UseFieldName.Value
	x.UseCustomName = *_UseCustomName.Value
	x.CreatedAt = _CreatedAt.Value
	x.Payload = _Payload.Value
	x.Wat = *_Wat.Value
	x.IsSomething = *_IsSomething.Value
	x.I32 = *_I32.Value
	x.Ui32 = *_Ui32.Value
	x.I64 = *_I64.Value
	x.Ui64 = *_Ui64.Value
	x.Fl = *_Fl.Value
	x.Dbl = *_Dbl.Value
	x.Beiz = *_Beiz.Value
	x.Si32 = *_Si32.Value
	x.Si64 = *_Si64.Value
	x.F32 = *_F32.Value
	x.F64 = *_F64.Value
	x.Sf32 = *_Sf32.Value
	x.Sf64 = *_Sf64.Value
	x.Some = *_Some.Value
	x.RepS = *_RepS.Value
	x.RepWat = *_RepWat.Value
	x.Something = _Something.Value

	if flagIdx := flagIndexes.lastByName("nested"); flagIdx != nil {
		x.Nested = new(CallRequest_Nested)
		x.Nested.ParseFlags(flagIdx.args)
	}

	for _, idx := range flagIndexes.byName("rep_nest") {
		x.RepNest = append(x.RepNest, new(CallRequest_Nested))
		x.RepNest[len(x.RepNest)-1].ParseFlags(idx.args)
	}
}
