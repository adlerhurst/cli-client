package types

import (
	"bytes"
	"log/slog"
	"regexp"
	"strings"
	"text/template"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"google.golang.org/protobuf/compiler/protogen"
)

var (
	title = cases.Title(language.English, cases.NoLower)
)

func removeWhitespaces(s string) string {
	re := regexp.MustCompile(`(^\s|\s$)`)
	return re.ReplaceAllString(s, "")
}

func escapeComment(s string) string {
	return strings.ReplaceAll(s, "`", "\"")
}

func header(gen *protogen.GeneratedFile, file *protogen.File) {
	gen.P("// Code generated by protoc-gen-go-cli. DO NOT EDIT.")
	gen.P()
	gen.P("package ", file.GoPackageName)
	gen.P()
}

var (
	ident = func(path protogen.GoImportPath, name string) protogen.GoIdent {
		return protogen.GoIdent{
			GoName:       name,
			GoImportPath: path,
		}
	}

	qualifier = func(gen *protogen.GeneratedFile) func(ident protogen.GoIdent) string {
		return func(ident protogen.GoIdent) string {
			return gen.QualifiedGoIdent(ident)
		}
	}

	logger = func(gen *protogen.GeneratedFile) func() string {
		return func() string {
			return qualifier(gen)(protogen.GoIdent{
				GoName:       "Logger()",
				GoImportPath: "github.com/adlerhurst/cli-client",
			})
		}
	}
)

func executeTemplate(gen *protogen.GeneratedFile, name, definition string, data any) error {
	var buffer bytes.Buffer

	err := template.Must(template.New(name).
		Funcs(template.FuncMap{
			"ident":   ident,
			"qualify": qualifier(gen),
			"logger":  logger(gen),
		}).
		Parse(definition)).
		Execute(&buffer, data)

	if err != nil {
		slog.Error("failed to execute template", "cause", err)
		return err
	}

	_, err = gen.Write(buffer.Bytes())
	if err != nil {
		slog.Error("failed to write", "cause", err)
	}

	return err
}
