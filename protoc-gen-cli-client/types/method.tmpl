var (
	_{{.VarName}}Request = &{{ .Request.GoName }}Flag{ {{ qualify .Request }}: new({{ qualify .Request }})}
    {{.VarName}} = &{{ ident "github.com/spf13/cobra" "Command" | qualify }}{
		Use:                "{{.Use}}",
		Short:              `{{.Short}}`,
		Long:               `{{.Long}}`,
        Run:                run{{.VarName}},
		FParseErrWhitelist: {{ ident "github.com/spf13/cobra" "FParseErrWhitelist" | qualify }}{UnknownFlags: true},
		DisableFlagParsing: true,
	}
	{{.VarName}}CallOptions []{{ ident "google.golang.org/grpc" "CallOption" | qualify}}
)

func init() {
	{{.Parent.VarName}}.AddCommand({{.VarName}})
	{{.VarName}}.PreRun = func(cmd *{{ ident "github.com/spf13/cobra" "Command" | qualify }}, args []string) {
		{{.VarName}}.Flags().Parse(args)
		_{{.VarName}}Request.AddFlags({{.VarName}}.Flags())
		if {{.VarName}}.Flag("help").Changed {
			{{.VarName}}.Help()
			{{ ident "os" "Exit" | qualify }}(0)
		}
		_{{.VarName}}Request.ParseFlags(cmd.Flags(), args)
	}
}

func run{{.VarName}}(cmd *{{ ident "github.com/spf13/cobra" "Command" | qualify }}, args []string){
	conn := {{ ident "github.com/adlerhurst/cli-client" "Connection" | qualify }}(cmd.Context())
	client := New{{ .Parent.Service.GoName }}Client(conn)

	res, err := client.{{ .Method.GoName }}(cmd.Context(), _{{.VarName}}Request.{{.Request.GoName}}, {{.VarName}}CallOptions...)
	if err != nil {
		{{ logger }}.Error("unable to {{ .Method.GoName }}", "cause", err)
		os.Exit(1)
	}
	{{ logger }}.Info("ðŸŽ‰ request succeeded", "result", res)
}
