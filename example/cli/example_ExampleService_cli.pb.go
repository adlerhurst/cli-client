// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package cli

import (
	cli_client "github.com/adlerhurst/cli-client"
	cobra "github.com/spf13/cobra"
	grpc "google.golang.org/grpc"
	os "os"
)

var (
	ExampleCmd = &cobra.Command{
		Use:   "example",
		Short: `This is an example service`,
		Long: `This is an example service
The service does nothing`,
		FParseErrWhitelist: cobra.FParseErrWhitelist{UnknownFlags: true},
		DisableFlagParsing: true,
	}
)
var (
	_ExampleMyCallCmdRequest = &CallRequestFlag{CallRequest: new(CallRequest)}
	ExampleMyCallCmd         = &cobra.Command{
		Use:   "my-call",
		Short: `I do absolutely nothing`,
		Long: `I do absolutely nothing
because i'm a showcase`,
		Run:                runExampleMyCallCmd,
		FParseErrWhitelist: cobra.FParseErrWhitelist{UnknownFlags: true},
		DisableFlagParsing: true,
	}
	ExampleMyCallCmdCallOptions []grpc.CallOption
)

func init() {
	ExampleCmd.AddCommand(ExampleMyCallCmd)
	ExampleMyCallCmd.PreRun = func(cmd *cobra.Command, args []string) {
		ExampleMyCallCmd.Flags().Parse(args)
		_ExampleMyCallCmdRequest.AddFlags(ExampleMyCallCmd.Flags())
		if ExampleMyCallCmd.Flag("help").Changed {
			ExampleMyCallCmd.Help()
			os.Exit(0)
		}
		_ExampleMyCallCmdRequest.ParseFlags(cmd.Flags(), args)
	}
}

func runExampleMyCallCmd(cmd *cobra.Command, args []string) {
	conn := cli_client.Connection(cmd.Context())
	client := NewExampleServiceClient(conn)

	_, err := client.Call(cmd.Context(), _ExampleMyCallCmdRequest.CallRequest, ExampleMyCallCmdCallOptions...)
	if err != nil {
		cli_client.Logger().Error("unable to Call", "cause", err)
		os.Exit(1)
	}
}

var (
	_ExampleNestedCmdRequest = &NestedRequestFlag{NestedRequest: new(NestedRequest)}
	ExampleNestedCmd         = &cobra.Command{
		Use:                "nested",
		Short:              ``,
		Long:               ``,
		Run:                runExampleNestedCmd,
		FParseErrWhitelist: cobra.FParseErrWhitelist{UnknownFlags: true},
		DisableFlagParsing: true,
	}
	ExampleNestedCmdCallOptions []grpc.CallOption
)

func init() {
	ExampleCmd.AddCommand(ExampleNestedCmd)
	ExampleNestedCmd.PreRun = func(cmd *cobra.Command, args []string) {
		ExampleNestedCmd.Flags().Parse(args)
		_ExampleNestedCmdRequest.AddFlags(ExampleNestedCmd.Flags())
		if ExampleNestedCmd.Flag("help").Changed {
			ExampleNestedCmd.Help()
			os.Exit(0)
		}
		_ExampleNestedCmdRequest.ParseFlags(cmd.Flags(), args)
	}
}

func runExampleNestedCmd(cmd *cobra.Command, args []string) {
	conn := cli_client.Connection(cmd.Context())
	client := NewExampleServiceClient(conn)

	_, err := client.Nested(cmd.Context(), _ExampleNestedCmdRequest.NestedRequest, ExampleNestedCmdCallOptions...)
	if err != nil {
		cli_client.Logger().Error("unable to Nested", "cause", err)
		os.Exit(1)
	}
}

var (
	_ExampleServerSideStreamCmdRequest = &ServerSideStreamRequestFlag{ServerSideStreamRequest: new(ServerSideStreamRequest)}
	ExampleServerSideStreamCmd         = &cobra.Command{
		Use:                "server-side-stream",
		Short:              ``,
		Long:               ``,
		Run:                runExampleServerSideStreamCmd,
		FParseErrWhitelist: cobra.FParseErrWhitelist{UnknownFlags: true},
		DisableFlagParsing: true,
	}
	ExampleServerSideStreamCmdCallOptions []grpc.CallOption
)

func init() {
	ExampleCmd.AddCommand(ExampleServerSideStreamCmd)
	ExampleServerSideStreamCmd.PreRun = func(cmd *cobra.Command, args []string) {
		ExampleServerSideStreamCmd.Flags().Parse(args)
		_ExampleServerSideStreamCmdRequest.AddFlags(ExampleServerSideStreamCmd.Flags())
		if ExampleServerSideStreamCmd.Flag("help").Changed {
			ExampleServerSideStreamCmd.Help()
			os.Exit(0)
		}
		_ExampleServerSideStreamCmdRequest.ParseFlags(cmd.Flags(), args)
	}
}

func runExampleServerSideStreamCmd(cmd *cobra.Command, args []string) {
	conn := cli_client.Connection(cmd.Context())
	client := NewExampleServiceClient(conn)

	_, err := client.ServerSideStream(cmd.Context(), _ExampleServerSideStreamCmdRequest.ServerSideStreamRequest, ExampleServerSideStreamCmdCallOptions...)
	if err != nil {
		cli_client.Logger().Error("unable to ServerSideStream", "cause", err)
		os.Exit(1)
	}
}

var (
	_ExampleClientSideStreamCmdRequest = &ClientSideStreamRequestFlag{ClientSideStreamRequest: new(ClientSideStreamRequest)}
	ExampleClientSideStreamCmd         = &cobra.Command{
		Use:                "client-side-stream",
		Short:              ``,
		Long:               ``,
		Run:                runExampleClientSideStreamCmd,
		FParseErrWhitelist: cobra.FParseErrWhitelist{UnknownFlags: true},
		DisableFlagParsing: true,
	}
	ExampleClientSideStreamCmdCallOptions []grpc.CallOption
)

func init() {
	ExampleCmd.AddCommand(ExampleClientSideStreamCmd)
	ExampleClientSideStreamCmd.PreRun = func(cmd *cobra.Command, args []string) {
		ExampleClientSideStreamCmd.Flags().Parse(args)
		_ExampleClientSideStreamCmdRequest.AddFlags(ExampleClientSideStreamCmd.Flags())
		if ExampleClientSideStreamCmd.Flag("help").Changed {
			ExampleClientSideStreamCmd.Help()
			os.Exit(0)
		}
		_ExampleClientSideStreamCmdRequest.ParseFlags(cmd.Flags(), args)
	}
}

func runExampleClientSideStreamCmd(cmd *cobra.Command, args []string) {
	conn := cli_client.Connection(cmd.Context())
	client := NewExampleServiceClient(conn)

	_, err := client.ClientSideStream(cmd.Context(), _ExampleClientSideStreamCmdRequest.ClientSideStreamRequest, ExampleClientSideStreamCmdCallOptions...)
	if err != nil {
		cli_client.Logger().Error("unable to ClientSideStream", "cause", err)
		os.Exit(1)
	}
}

var (
	_ExampleBidirectionalStreamCmdRequest = &BidirectionalStreamRequestFlag{BidirectionalStreamRequest: new(BidirectionalStreamRequest)}
	ExampleBidirectionalStreamCmd         = &cobra.Command{
		Use:                "bidirectional-stream",
		Short:              ``,
		Long:               ``,
		Run:                runExampleBidirectionalStreamCmd,
		FParseErrWhitelist: cobra.FParseErrWhitelist{UnknownFlags: true},
		DisableFlagParsing: true,
	}
	ExampleBidirectionalStreamCmdCallOptions []grpc.CallOption
)

func init() {
	ExampleCmd.AddCommand(ExampleBidirectionalStreamCmd)
	ExampleBidirectionalStreamCmd.PreRun = func(cmd *cobra.Command, args []string) {
		ExampleBidirectionalStreamCmd.Flags().Parse(args)
		_ExampleBidirectionalStreamCmdRequest.AddFlags(ExampleBidirectionalStreamCmd.Flags())
		if ExampleBidirectionalStreamCmd.Flag("help").Changed {
			ExampleBidirectionalStreamCmd.Help()
			os.Exit(0)
		}
		_ExampleBidirectionalStreamCmdRequest.ParseFlags(cmd.Flags(), args)
	}
}

func runExampleBidirectionalStreamCmd(cmd *cobra.Command, args []string) {
	conn := cli_client.Connection(cmd.Context())
	client := NewExampleServiceClient(conn)

	_, err := client.BidirectionalStream(cmd.Context(), _ExampleBidirectionalStreamCmdRequest.BidirectionalStreamRequest, ExampleBidirectionalStreamCmdCallOptions...)
	if err != nil {
		cli_client.Logger().Error("unable to BidirectionalStream", "cause", err)
		os.Exit(1)
	}
}
