// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: adlerhurst/example/v1/example.proto

package cli

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExampleService_Call_FullMethodName                = "/adlerhurst.example.v1.ExampleService/Call"
	ExampleService_Nested_FullMethodName              = "/adlerhurst.example.v1.ExampleService/Nested"
	ExampleService_ServerSideStream_FullMethodName    = "/adlerhurst.example.v1.ExampleService/ServerSideStream"
	ExampleService_ClientSideStream_FullMethodName    = "/adlerhurst.example.v1.ExampleService/ClientSideStream"
	ExampleService_BidirectionalStream_FullMethodName = "/adlerhurst.example.v1.ExampleService/BidirectionalStream"
)

// ExampleServiceClient is the client API for ExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleServiceClient interface {
	// I do absolutely nothing
	// because i'm a showcase
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	Nested(ctx context.Context, in *NestedRequest, opts ...grpc.CallOption) (*NestedResponse, error)
	ServerSideStream(ctx context.Context, in *ServerSideStreamRequest, opts ...grpc.CallOption) (ExampleService_ServerSideStreamClient, error)
	ClientSideStream(ctx context.Context, opts ...grpc.CallOption) (ExampleService_ClientSideStreamClient, error)
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (ExampleService_BidirectionalStreamClient, error)
}

type exampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleServiceClient(cc grpc.ClientConnInterface) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, ExampleService_Call_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) Nested(ctx context.Context, in *NestedRequest, opts ...grpc.CallOption) (*NestedResponse, error) {
	out := new(NestedResponse)
	err := c.cc.Invoke(ctx, ExampleService_Nested_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) ServerSideStream(ctx context.Context, in *ServerSideStreamRequest, opts ...grpc.CallOption) (ExampleService_ServerSideStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExampleService_ServiceDesc.Streams[0], ExampleService_ServerSideStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServiceServerSideStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExampleService_ServerSideStreamClient interface {
	Recv() (*ServerSideStreamResponse, error)
	grpc.ClientStream
}

type exampleServiceServerSideStreamClient struct {
	grpc.ClientStream
}

func (x *exampleServiceServerSideStreamClient) Recv() (*ServerSideStreamResponse, error) {
	m := new(ServerSideStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleServiceClient) ClientSideStream(ctx context.Context, opts ...grpc.CallOption) (ExampleService_ClientSideStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExampleService_ServiceDesc.Streams[1], ExampleService_ClientSideStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServiceClientSideStreamClient{stream}
	return x, nil
}

type ExampleService_ClientSideStreamClient interface {
	Send(*ClientSideStreamRequest) error
	CloseAndRecv() (*ClientSideStreamResponse, error)
	grpc.ClientStream
}

type exampleServiceClientSideStreamClient struct {
	grpc.ClientStream
}

func (x *exampleServiceClientSideStreamClient) Send(m *ClientSideStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleServiceClientSideStreamClient) CloseAndRecv() (*ClientSideStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientSideStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleServiceClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (ExampleService_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExampleService_ServiceDesc.Streams[2], ExampleService_BidirectionalStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServiceBidirectionalStreamClient{stream}
	return x, nil
}

type ExampleService_BidirectionalStreamClient interface {
	Send(*BidirectionalStreamRequest) error
	Recv() (*BidirectionalStreamResponse, error)
	grpc.ClientStream
}

type exampleServiceBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *exampleServiceBidirectionalStreamClient) Send(m *BidirectionalStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleServiceBidirectionalStreamClient) Recv() (*BidirectionalStreamResponse, error) {
	m := new(BidirectionalStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleServiceServer is the server API for ExampleService service.
// All implementations must embed UnimplementedExampleServiceServer
// for forward compatibility
type ExampleServiceServer interface {
	// I do absolutely nothing
	// because i'm a showcase
	Call(context.Context, *CallRequest) (*CallResponse, error)
	Nested(context.Context, *NestedRequest) (*NestedResponse, error)
	ServerSideStream(*ServerSideStreamRequest, ExampleService_ServerSideStreamServer) error
	ClientSideStream(ExampleService_ClientSideStreamServer) error
	BidirectionalStream(ExampleService_BidirectionalStreamServer) error
	mustEmbedUnimplementedExampleServiceServer()
}

// UnimplementedExampleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExampleServiceServer struct {
}

func (UnimplementedExampleServiceServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedExampleServiceServer) Nested(context.Context, *NestedRequest) (*NestedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nested not implemented")
}
func (UnimplementedExampleServiceServer) ServerSideStream(*ServerSideStreamRequest, ExampleService_ServerSideStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerSideStream not implemented")
}
func (UnimplementedExampleServiceServer) ClientSideStream(ExampleService_ClientSideStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientSideStream not implemented")
}
func (UnimplementedExampleServiceServer) BidirectionalStream(ExampleService_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedExampleServiceServer) mustEmbedUnimplementedExampleServiceServer() {}

// UnsafeExampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleServiceServer will
// result in compilation errors.
type UnsafeExampleServiceServer interface {
	mustEmbedUnimplementedExampleServiceServer()
}

func RegisterExampleServiceServer(s grpc.ServiceRegistrar, srv ExampleServiceServer) {
	s.RegisterService(&ExampleService_ServiceDesc, srv)
}

func _ExampleService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_Nested_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NestedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).Nested(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_Nested_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).Nested(ctx, req.(*NestedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_ServerSideStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerSideStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServiceServer).ServerSideStream(m, &exampleServiceServerSideStreamServer{stream})
}

type ExampleService_ServerSideStreamServer interface {
	Send(*ServerSideStreamResponse) error
	grpc.ServerStream
}

type exampleServiceServerSideStreamServer struct {
	grpc.ServerStream
}

func (x *exampleServiceServerSideStreamServer) Send(m *ServerSideStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExampleService_ClientSideStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServiceServer).ClientSideStream(&exampleServiceClientSideStreamServer{stream})
}

type ExampleService_ClientSideStreamServer interface {
	SendAndClose(*ClientSideStreamResponse) error
	Recv() (*ClientSideStreamRequest, error)
	grpc.ServerStream
}

type exampleServiceClientSideStreamServer struct {
	grpc.ServerStream
}

func (x *exampleServiceClientSideStreamServer) SendAndClose(m *ClientSideStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleServiceClientSideStreamServer) Recv() (*ClientSideStreamRequest, error) {
	m := new(ClientSideStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExampleService_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServiceServer).BidirectionalStream(&exampleServiceBidirectionalStreamServer{stream})
}

type ExampleService_BidirectionalStreamServer interface {
	Send(*BidirectionalStreamResponse) error
	Recv() (*BidirectionalStreamRequest, error)
	grpc.ServerStream
}

type exampleServiceBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *exampleServiceBidirectionalStreamServer) Send(m *BidirectionalStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleServiceBidirectionalStreamServer) Recv() (*BidirectionalStreamRequest, error) {
	m := new(BidirectionalStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleService_ServiceDesc is the grpc.ServiceDesc for ExampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adlerhurst.example.v1.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _ExampleService_Call_Handler,
		},
		{
			MethodName: "Nested",
			Handler:    _ExampleService_Nested_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerSideStream",
			Handler:       _ExampleService_ServerSideStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientSideStream",
			Handler:       _ExampleService_ClientSideStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _ExampleService_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "adlerhurst/example/v1/example.proto",
}
