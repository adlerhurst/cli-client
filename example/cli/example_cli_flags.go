// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package cli

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type BidirectionalStreamRequestFlag struct {
	*BidirectionalStreamRequest

	changed bool
	set     *pflag.FlagSet

	textFlag *cli_client.StringParser
}

func (x *BidirectionalStreamRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BidirectionalStreamRequest", pflag.ContinueOnError)

	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	parent.AddFlagSet(x.set)
}

func (x *BidirectionalStreamRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.textFlag.Changed() {
		x.changed = true
		x.BidirectionalStreamRequest.Text = *x.textFlag.Value
	}
}

func (x *BidirectionalStreamRequestFlag) Changed() bool {
	return x.changed
}

type BidirectionalStreamResponseFlag struct {
	*BidirectionalStreamResponse

	changed bool
	set     *pflag.FlagSet

	numberFlag *cli_client.Int64Parser
}

func (x *BidirectionalStreamResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BidirectionalStreamResponse", pflag.ContinueOnError)

	x.numberFlag = cli_client.NewInt64Parser(x.set, "number", "")
	parent.AddFlagSet(x.set)
}

func (x *BidirectionalStreamResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.numberFlag.Changed() {
		x.changed = true
		x.BidirectionalStreamResponse.Number = *x.numberFlag.Value
	}
}

func (x *BidirectionalStreamResponseFlag) Changed() bool {
	return x.changed
}

type CallRequestFlag struct {
	*CallRequest

	changed bool
	set     *pflag.FlagSet

	useFieldNameFlag  *cli_client.StringParser
	useCustomNameFlag *cli_client.StringParser
	nestedFlag        *CallRequest_NestedFlag
	repNestFlag       []*CallRequest_NestedFlag
	createdAtFlag     *cli_client.TimestampParser
	payloadFlag       *cli_client.StructParser
	watFlag           *cli_client.EnumParser[CallRequest_Wat]
	isSomethingFlag   *cli_client.BoolParser
	i32Flag           *cli_client.Int32Parser
	ui32Flag          *cli_client.Uint32Parser
	i64Flag           *cli_client.Int64Parser
	ui64Flag          *cli_client.Uint64Parser
	flFlag            *cli_client.FloatParser
	dblFlag           *cli_client.DoubleParser
	beizFlag          *cli_client.BytesParser
	si32Flag          *cli_client.Sint32Parser
	si64Flag          *cli_client.Sint64Parser
	f32Flag           *cli_client.Fixed32Parser
	f64Flag           *cli_client.Fixed64Parser
	sf32Flag          *cli_client.Sfixed32Parser
	sf64Flag          *cli_client.Sfixed64Parser
	someFlag          *cli_client.EnumParser[Some]
	repSFlag          *cli_client.DoubleSliceParser
	repWatFlag        *cli_client.EnumSliceParser[CallRequest_Wat]
	somethingFlag     *cli_client.AnyParser
	ooTextFlag        *cli_client.StringParser
	ooWatFlag         *cli_client.EnumParser[CallRequest_Wat]
	ooNestedFlag      *CallRequest_NestedFlag
}

func (x *CallRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CallRequest", pflag.ContinueOnError)

	x.useFieldNameFlag = cli_client.NewStringParser(x.set, "use-field-name", "")
	x.useCustomNameFlag = cli_client.NewStringParser(x.set, "custom", "")
	x.repNestFlag = []*CallRequest_NestedFlag{}
	x.createdAtFlag = cli_client.NewTimestampParser(x.set, "created-at", "")
	x.payloadFlag = cli_client.NewStructParser(x.set, "payload", "")
	x.watFlag = cli_client.NewEnumParser[CallRequest_Wat](x.set, "wat", "")
	x.isSomethingFlag = cli_client.NewBoolParser(x.set, "is-something", "")
	x.i32Flag = cli_client.NewInt32Parser(x.set, "i32", "")
	x.ui32Flag = cli_client.NewUint32Parser(x.set, "ui32", "")
	x.i64Flag = cli_client.NewInt64Parser(x.set, "i64", "")
	x.ui64Flag = cli_client.NewUint64Parser(x.set, "ui64", "")
	x.flFlag = cli_client.NewFloatParser(x.set, "fl", "")
	x.dblFlag = cli_client.NewDoubleParser(x.set, "dbl", "")
	x.beizFlag = cli_client.NewBytesParser(x.set, "beiz", "")
	x.si32Flag = cli_client.NewSint32Parser(x.set, "si32", "")
	x.si64Flag = cli_client.NewSint64Parser(x.set, "si64", "")
	x.f32Flag = cli_client.NewFixed32Parser(x.set, "f32", "")
	x.f64Flag = cli_client.NewFixed64Parser(x.set, "f64", "")
	x.sf32Flag = cli_client.NewSfixed32Parser(x.set, "sf32", "")
	x.sf64Flag = cli_client.NewSfixed64Parser(x.set, "sf64", "")
	x.someFlag = cli_client.NewEnumParser[Some](x.set, "some", "")
	x.repSFlag = cli_client.NewDoubleSliceParser(x.set, "rep-s", "")
	x.repWatFlag = cli_client.NewEnumSliceParser[CallRequest_Wat](x.set, "rep-wat", "")
	x.somethingFlag = cli_client.NewAnyParser(x.set, "something", "")
	x.ooTextFlag = cli_client.NewStringParser(x.set, "oo-text", "")
	x.ooWatFlag = cli_client.NewEnumParser[CallRequest_Wat](x.set, "oo-wat", "")
	x.nestedFlag = &CallRequest_NestedFlag{CallRequest_Nested: new(CallRequest_Nested)}
	x.nestedFlag.AddFlags(x.set)
	x.ooNestedFlag = &CallRequest_NestedFlag{CallRequest_Nested: new(CallRequest_Nested)}
	x.ooNestedFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *CallRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "nested", "rep-nest", "oo-nested")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("nested"); flagIdx != nil {
		x.nestedFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("oo-nested"); flagIdx != nil {
		x.ooNestedFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("rep-nest") {
		x.repNestFlag = append(x.repNestFlag, &CallRequest_NestedFlag{CallRequest_Nested: new(CallRequest_Nested)})
		x.repNestFlag[len(x.repNestFlag)-1].AddFlags(x.set)
		x.repNestFlag[len(x.repNestFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.useFieldNameFlag.Changed() {
		x.changed = true
		x.CallRequest.UseFieldName = *x.useFieldNameFlag.Value
	}
	if x.useCustomNameFlag.Changed() {
		x.changed = true
		x.CallRequest.UseCustomName = *x.useCustomNameFlag.Value
	}

	if x.nestedFlag.Changed() {
		x.changed = true
		x.CallRequest.Nested = x.nestedFlag.CallRequest_Nested
	}

	if len(x.repNestFlag) > 0 {
		x.changed = true
		x.RepNest = make([]*CallRequest_Nested, len(x.repNestFlag))
		for i, value := range x.repNestFlag {
			x.CallRequest.RepNest[i] = value.CallRequest_Nested
		}
	}

	if x.createdAtFlag.Changed() {
		x.changed = true
		x.CallRequest.CreatedAt = x.createdAtFlag.Value
	}
	if x.payloadFlag.Changed() {
		x.changed = true
		x.CallRequest.Payload = x.payloadFlag.Value
	}
	if x.watFlag.Changed() {
		x.changed = true
		x.CallRequest.Wat = *x.watFlag.Value
	}
	if x.isSomethingFlag.Changed() {
		x.changed = true
		x.CallRequest.IsSomething = *x.isSomethingFlag.Value
	}
	if x.i32Flag.Changed() {
		x.changed = true
		x.CallRequest.I32 = x.i32Flag.Value
	}
	if x.ui32Flag.Changed() {
		x.changed = true
		x.CallRequest.Ui32 = *x.ui32Flag.Value
	}
	if x.i64Flag.Changed() {
		x.changed = true
		x.CallRequest.I64 = *x.i64Flag.Value
	}
	if x.ui64Flag.Changed() {
		x.changed = true
		x.CallRequest.Ui64 = *x.ui64Flag.Value
	}
	if x.flFlag.Changed() {
		x.changed = true
		x.CallRequest.Fl = *x.flFlag.Value
	}
	if x.dblFlag.Changed() {
		x.changed = true
		x.CallRequest.Dbl = *x.dblFlag.Value
	}
	if x.beizFlag.Changed() {
		x.changed = true
		x.CallRequest.Beiz = *x.beizFlag.Value
	}
	if x.si32Flag.Changed() {
		x.changed = true
		x.CallRequest.Si32 = *x.si32Flag.Value
	}
	if x.si64Flag.Changed() {
		x.changed = true
		x.CallRequest.Si64 = *x.si64Flag.Value
	}
	if x.f32Flag.Changed() {
		x.changed = true
		x.CallRequest.F32 = *x.f32Flag.Value
	}
	if x.f64Flag.Changed() {
		x.changed = true
		x.CallRequest.F64 = *x.f64Flag.Value
	}
	if x.sf32Flag.Changed() {
		x.changed = true
		x.CallRequest.Sf32 = *x.sf32Flag.Value
	}
	if x.sf64Flag.Changed() {
		x.changed = true
		x.CallRequest.Sf64 = *x.sf64Flag.Value
	}
	if x.someFlag.Changed() {
		x.changed = true
		x.CallRequest.Some = *x.someFlag.Value
	}
	if x.repSFlag.Changed() {
		x.changed = true
		x.CallRequest.RepS = *x.repSFlag.Value
	}
	if x.repWatFlag.Changed() {
		x.changed = true
		x.CallRequest.RepWat = *x.repWatFlag.Value
	}
	if x.somethingFlag.Changed() {
		x.changed = true
		x.CallRequest.Something = x.somethingFlag.Value
	}

	switch cli_client.FieldIndexes(args, "oo-text", "oo-wat", "oo-nested").Last().Flag {
	case "oo-text":
		if x.ooTextFlag.Changed() {
			x.changed = true
			x.CallRequest.Oo = &CallRequest_OoText{OoText: *x.ooTextFlag.Value}
		}
	case "oo-wat":
		if x.ooWatFlag.Changed() {
			x.changed = true
			x.CallRequest.Oo = &CallRequest_OoWat{OoWat: *x.ooWatFlag.Value}
		}
	case "oo-nested":
		if x.ooNestedFlag.Changed() {
			x.changed = true
			x.CallRequest.Oo = &CallRequest_OoNested{OoNested: x.ooNestedFlag.CallRequest_Nested}
		}
	}
}

func (x *CallRequestFlag) Changed() bool {
	return x.changed
}

type CallRequest_NestedFlag struct {
	*CallRequest_Nested

	changed bool
	set     *pflag.FlagSet

	fieldFlag *cli_client.StringParser
}

func (x *CallRequest_NestedFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CallRequest_Nested", pflag.ContinueOnError)

	x.fieldFlag = cli_client.NewStringParser(x.set, "field", "")
	parent.AddFlagSet(x.set)
}

func (x *CallRequest_NestedFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.fieldFlag.Changed() {
		x.changed = true
		x.CallRequest_Nested.Field = *x.fieldFlag.Value
	}
}

func (x *CallRequest_NestedFlag) Changed() bool {
	return x.changed
}

type CallResponseFlag struct {
	*CallResponse

	changed bool
	set     *pflag.FlagSet

	numberFlag *cli_client.Int64Parser
}

func (x *CallResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CallResponse", pflag.ContinueOnError)

	x.numberFlag = cli_client.NewInt64Parser(x.set, "number", "")
	parent.AddFlagSet(x.set)
}

func (x *CallResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.numberFlag.Changed() {
		x.changed = true
		x.CallResponse.Number = *x.numberFlag.Value
	}
}

func (x *CallResponseFlag) Changed() bool {
	return x.changed
}

type ClientSideStreamRequestFlag struct {
	*ClientSideStreamRequest

	changed bool
	set     *pflag.FlagSet

	textFlag *cli_client.StringParser
}

func (x *ClientSideStreamRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ClientSideStreamRequest", pflag.ContinueOnError)

	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	parent.AddFlagSet(x.set)
}

func (x *ClientSideStreamRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.textFlag.Changed() {
		x.changed = true
		x.ClientSideStreamRequest.Text = *x.textFlag.Value
	}
}

func (x *ClientSideStreamRequestFlag) Changed() bool {
	return x.changed
}

type ClientSideStreamResponseFlag struct {
	*ClientSideStreamResponse

	changed bool
	set     *pflag.FlagSet

	numberFlag *cli_client.Int64Parser
}

func (x *ClientSideStreamResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ClientSideStreamResponse", pflag.ContinueOnError)

	x.numberFlag = cli_client.NewInt64Parser(x.set, "number", "")
	parent.AddFlagSet(x.set)
}

func (x *ClientSideStreamResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.numberFlag.Changed() {
		x.changed = true
		x.ClientSideStreamResponse.Number = *x.numberFlag.Value
	}
}

func (x *ClientSideStreamResponseFlag) Changed() bool {
	return x.changed
}

type NestedRequestFlag struct {
	*NestedRequest

	changed bool
	set     *pflag.FlagSet

	nestedFlag *NestedRequest_NestedFlag
	idFlag     *cli_client.StringParser
}

func (x *NestedRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("NestedRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nestedFlag = &NestedRequest_NestedFlag{NestedRequest_Nested: new(NestedRequest_Nested)}
	x.nestedFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *NestedRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "nested")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("nested"); flagIdx != nil {
		x.nestedFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nestedFlag.Changed() {
		x.changed = true
		x.NestedRequest.Nested = x.nestedFlag.NestedRequest_Nested
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.NestedRequest.Id = *x.idFlag.Value
	}
}

func (x *NestedRequestFlag) Changed() bool {
	return x.changed
}

type NestedRequest_NestedFlag struct {
	*NestedRequest_Nested

	changed bool
	set     *pflag.FlagSet

	idFlag    *cli_client.StringParser
	depthFlag *cli_client.Int32Parser
}

func (x *NestedRequest_NestedFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("NestedRequest_Nested", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.depthFlag = cli_client.NewInt32Parser(x.set, "depth", "")
	parent.AddFlagSet(x.set)
}

func (x *NestedRequest_NestedFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.NestedRequest_Nested.Id = *x.idFlag.Value
	}
	if x.depthFlag.Changed() {
		x.changed = true
		x.NestedRequest_Nested.Depth = *x.depthFlag.Value
	}
}

func (x *NestedRequest_NestedFlag) Changed() bool {
	return x.changed
}

type NestedResponseFlag struct {
	*NestedResponse

	changed bool
	set     *pflag.FlagSet
}

func (x *NestedResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("NestedResponse", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *NestedResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *NestedResponseFlag) Changed() bool {
	return x.changed
}

type ServerSideStreamRequestFlag struct {
	*ServerSideStreamRequest

	changed bool
	set     *pflag.FlagSet

	textFlag *cli_client.StringParser
}

func (x *ServerSideStreamRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ServerSideStreamRequest", pflag.ContinueOnError)

	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	parent.AddFlagSet(x.set)
}

func (x *ServerSideStreamRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.textFlag.Changed() {
		x.changed = true
		x.ServerSideStreamRequest.Text = *x.textFlag.Value
	}
}

func (x *ServerSideStreamRequestFlag) Changed() bool {
	return x.changed
}

type ServerSideStreamResponseFlag struct {
	*ServerSideStreamResponse

	changed bool
	set     *pflag.FlagSet

	numberFlag *cli_client.Int64Parser
}

func (x *ServerSideStreamResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ServerSideStreamResponse", pflag.ContinueOnError)

	x.numberFlag = cli_client.NewInt64Parser(x.set, "number", "")
	parent.AddFlagSet(x.set)
}

func (x *ServerSideStreamResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.numberFlag.Changed() {
		x.changed = true
		x.ServerSideStreamResponse.Number = *x.numberFlag.Value
	}
}

func (x *ServerSideStreamResponseFlag) Changed() bool {
	return x.changed
}
